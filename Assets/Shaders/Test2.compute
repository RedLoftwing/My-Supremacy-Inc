#pragma kernel CSMain

// Buffer of vertices to be processed
StructuredBuffer<float3> vertices;
// Buffer of original vertex positions
StructuredBuffer<float3> originalVertexPos;
// Buffer to store the current y-offset for each vertex
RWStructuredBuffer<float> vertexYOffset;
// Output buffer for modified vertices
RWStructuredBuffer<float3> outputVertices;

// Parameters
float3 _intersectingObjectPosition;
float3 _objectHalfSize;
float _ascendSpeed;
float _descendSpeed;
float _deltaTime;
float _maxVertHeight;

bool IsWithinBounds(float3 inVPos, float3 inMinBounds, float3 inMaxBounds);

[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Read and store this vertex's position.
    float3 vPos = vertices[id.x];
    float3 originalVPos = originalVertexPos[id.x];

    // Define the bounds of the object.
    float3 objectPositionCentre = _intersectingObjectPosition + _objectHalfSize;
    float3 minBounds = objectPositionCentre - _objectHalfSize;
    float3 maxBounds = objectPositionCentre + _objectHalfSize;

    // Get the current y-offset for this vertex.
    float currentYOffset = vertexYOffset[id.x];
    // IF the vertex position is within the bounds of the object...increase the Y offset value...otherwise lerp the Y offset between its current value and 0. 
    if (IsWithinBounds(vPos, minBounds, maxBounds))
    {
        currentYOffset += _ascendSpeed * _deltaTime;
    }
    else
    {
        currentYOffset = lerp(currentYOffset, 0.0, _deltaTime * _descendSpeed);
    }

    // Calculate the new y-position and ensure it is not above the maximum vertex height.
    float newYPosition = originalVPos.y + currentYOffset;
    newYPosition = min(newYPosition, _maxVertHeight);

    // Update the y-offset buffer with the clamped value
    vertexYOffset[id.x] = newYPosition - originalVPos.y;

    // Apply the clamped y-offset to the vertex position
    vPos.y = newYPosition;

    // Write the modified vertex position to the output buffer
    outputVertices[id.x] = vPos;
}

bool IsWithinBounds(float3 inVPos, float3 inMinBounds, float3 inMaxBounds)
{
    // Check if the vertex position is within the bounds.
    return (inVPos.x >= inMinBounds.x) && (inVPos.x <= inMaxBounds.x) &&
           (inVPos.y >= inMinBounds.y) && (inVPos.y <= inMaxBounds.y) &&
           (inVPos.z >= inMinBounds.z) && (inVPos.z <= inMaxBounds.z);
}
