// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct MyLocalVertices
{
    uint myVertexIndex;
    float3 myVertexVector;
    // float3 originalVector;
    // float3 worldVector;
};

RWStructuredBuffer<MyLocalVertices> allNonLocalVerticesBuffer;
uint allNonLocalVerticesBufferLength;
RWStructuredBuffer<MyLocalVertices> localVerticesBuffer;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //uint index = id.x + id.y * 8; // Calculate the linear index
    //localVerticesBuffer[index].myVertexVector.y += 5.0f;
    
    MyLocalVertices thisVertex = localVerticesBuffer[id.x];

    bool found = false;
    for (uint i = 0; i < allNonLocalVerticesBufferLength; i++)
    {
        if(allNonLocalVerticesBuffer[i].myVertexIndex == thisVertex.myVertexIndex)
        {
            found = true;
            break;
        }
    }
    if(found)
    {
        thisVertex.myVertexVector.x = thisVertex.myVertexVector.x + 0.0f;
        thisVertex.myVertexVector.y = thisVertex.myVertexVector.y + 0.10f;
        thisVertex.myVertexVector.z = thisVertex.myVertexVector.z + 0.0f;
    }
    else
    {
        thisVertex.myVertexVector.x = thisVertex.myVertexVector.x + 0.0f;
        thisVertex.myVertexVector.y = thisVertex.myVertexVector.y + 0.0f;
        thisVertex.myVertexVector.z = thisVertex.myVertexVector.z + 0.0f;
    }
    
    localVerticesBuffer[id.x] = thisVertex;
}